#!/usr/bin/env bash

# NAME
#   debug-fns - вспомогательные функции дебаггера

# SYNOPSIS 
#   debug-fns [опции] <скрипт> [аргументы]

# DESCRIPTION 
#   debug-fns  — это утилита командной строки, предназначенная для упрощения процесса отладки других скриптов.

# OPTIONS
#   -h, --help отображает это руководство и выходит.

breakpoints=''
breakpoint_cond=''

function cleanup() {
  echo -e "\nВыходим из DEBUG-режима"
  trap - DEBUG

  set +o functrace

  echo "Удаляем $1"
  rm $1
}

function set_breakpoint() {
  local breakpoint_index=$1

  for breakpoint in $breakpoints; do
    if [[ $breakpoint -eq $breakpoint_index ]]; then
      echo "Уже установлена точка остановы на строке $breakpoint_index"
      return;
    fi
  done

  if [[ -z "$breakpoint_index" ]]; then
    echo "Индекс $breakpoint_index точки остановы не найден"
  elif [[ $(echo $breakpoint_index | grep '^[0-9]*') ]]; then
    if [[ -n ${lines[$breakpoint_index]} ]]; then
      breakpoints=$(cat <(
        for breakpoint in "$breakpoints"; do
          echo $breakpoint_index
          echo $breakpoint
        done
      ) | sort -n)

      echo "Установлена точка остановы на строке $breakpoint_index"
    else
      echo "Строка $breakpoint_index пустая"
    fi
  else
    echo "Индекс $breakpoint_index точки остановы не является числовым"
  fi
}

function set_breakpoint_cond() {
  if [[ -n "$*" ]]; then
    breakpoint_cond=$*

    echo "Установлено условие брейкпоинта: $breakpoint_cond"
  else
    breakpoint_cond=''
    echo "Условие брейкпоинта сброшено"
  fi
}

function has_breakpoint() {
  breakpoint_index=$1

  local i=0

  if [ "$breakpoints" ]; then
    while [[ $i -lt ${#breakpoints[@]} ]]; do
      if [[ ${breakpoints[$i] -eq $current_line_number} ]]; then
        return 0
      fi
      ((i+1))
    done
  fi

  return 1
}

function display_text() {
  local line_number=0

  if [[ ${#lines[@]} -gt 0 ]]; then
    for line in "${lines[@]}"; do
      pointer=''

      if [[ $current_line_number -eq $line_number ]]; then
        pointer='>'
      fi

      echo "$line_number:$pointer $line"
      let line_number=$line_number+1
    done
  else
    echo "Не найдены команды для скрипта по пути: $script_path"
  fi
}

function step_in() {
  local cmd args

  while read -e -p 'debugger> ' cmd args; do
    case "$cmd" in
      \? | h)
        menu
        ;;
      bp)
        set_breakpoint $args
        ;;
      bc)
        set_breakpoint_cond $args
        ;;
      s)
        let skip=${args:-1}
        return
        ;;
      go)
        return
        ;;
      -trace)
        trace=1
        ;;
      +trace)
        trace=0
        ;;
      dt)
        display_text
        ;;
    esac
  done
}

function enter_debug() {
  current_line_number=$1

  if [[ $skip -gt 0 ]]; then
    let skip=$skip-1
  fi

  if [[ $trace -eq 1 ]]; then
    echo "$PS4 line $current_line_number: ${lines[$current_line_number]}"
  fi

  if has_breakpoint; then
    echo "Найдена точка остановы на строке $current_line_number"
    step_in
  elif [[ -n $breakpoint_cond ]]; then
    eval "$breakpoint_cond"
    echo "Выполнено условие: $breakpoint_cond"
    step_in
  elif [[ $skip -eq 0 ]]; then
    step_in
  else
    echo "Выполнение строки $current_line_number"
  fi
}
